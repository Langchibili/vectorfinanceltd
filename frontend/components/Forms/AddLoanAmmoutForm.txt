// "use client";

// import React from "react";

// export default class AddLoanAmountForm extends React.Component {
//   constructor(props) {
//     super(props);
//     this.state = {
//       loanAmount: '',
//       onPayroll: '',
//       salaryDeduction: '',
//       loanCategory: '',
//       loanType: '',
//       loanPurpose: '',
//       loanPurposeDetails: '',
//       loanTerm: 12,  // Default term, can be changed
//       isFormValid: false,
//       stateSaved: false,
//       error: null,
//     };
//   }

//   handleInputChange = (e) => {
//     const { name, value } = e.target;
//     this.setState({ [name]: value }, this.checkFormValidity);
//   };

//   checkFormValidity = () => {
//     let { loanAmount, onPayroll, loanCategory, loanType, salaryDeduction, loanPurpose, loanTerm } = this.state;

//     let isFormValid = false;

//     if (onPayroll === 'yes' && salaryDeduction === 'yes') {
//         loanCategory = "salaryLoans"  
//         loanType = "salaryBased"  
//         isFormValid = true;
//     } 
//     else if (onPayroll === 'yes' && salaryDeduction === 'no') {
//         loanCategory = "assetLoans"  
//         loanType = null
//         isFormValid = true;
//     }
//     else if (onPayroll === 'no') {
//         loanCategory = "assetLoans"  
//         loanType = null
//         isFormValid = true;
//     }

//     if (!loanPurpose || !loanAmount || !loanTerm) {
//       isFormValid = false;
//     }

//     this.setState({ isFormValid, loanCategory, loanAmount, loanType });
//   };

//   handleSubmit = async (e) => {
//     e.preventDefault();
//     delete this.state.isFormValid;
//     delete this.state.error;
//     delete this.state.onPayroll;
//     delete this.state.salaryDeduction;
//     this.props.setLoanInformation(this.state);
//     this.setState({
//       isFormValid: true,
//       stateSaved: true,
//     });
//   };

//   render() {
//     const { loanAmount, onPayroll, salaryDeduction, loanPurpose, loanPurposeDetails, loanTerm, isFormValid } = this.state;
//     const loanPurposes = [
//       'Business Expansion',
//       'Home Renovation',
//       'Education',
//       'Medical Expenses',
//       'Debt Consolidation',
//       'Vehicle Purchase',
//       'Others'
//     ]; // Predefined list of loan purposes

//     const maxLoanTerm = this.props.maxLoanTerm || 60; // Example max term passed from server

//     return (
//       <>
//         <div className="row">
//           <div className="col-lg-12">
//             <div className="card">
//               <div className="card-header align-items-center d-flex">
//                 <h4 className="card-title mb-0 flex-grow-1">Loan Application</h4>
//               </div>
//               <div className="card-body">
//                 <div className="live-preview">
//                   <div className="row gy-4">
//                     {/* Loan Amount Input */}
//                     <div className="col-lg-12">
//                       <h6>How much are you looking to get?</h6>
//                       <div className="input-group">
//                         <span className="input-group-text">K</span>
//                         <input
//                           type="number"
//                           name="loanAmount"
//                           value={loanAmount}
//                           autoComplete="off"
//                           onChange={this.handleInputChange}
//                           className="form-control"
//                           aria-label="Loan amount input"
//                           aria-describedby="inputGroup-sizing-default"
//                         />
//                         <span className="input-group-text">.00</span>
//                       </div>
//                     </div>
                    
//                     {/* Payroll Question */}
//                     <div className="col-lg-12">
//                       <div className="input-group">
//                         <label className="form-label mr-2">Are you on payroll (Government or Company)?</label>
//                         <select
//                           className="form-select"
//                           name="onPayroll"
//                           autoComplete="off"
//                           value={onPayroll}
//                           onChange={this.handleInputChange}
//                         >
//                           <option value="">Choose...</option>
//                           <option value="yes">Yes I am</option>
//                           <option value="no">No I own a business</option>
//                         </select>
//                       </div>
//                     </div>

//                     {/* Salary Deduction Question (Visible only if onPayroll is 'yes') */}
//                     {onPayroll === 'yes' && (
//                       <div className="col-lg-12">
//                         <div className="input-group">
//                           <label className="form-label mr-2">Do you want this loan's monthly payment to be deducted from your salary?</label>
//                           <select
//                             className="form-select"
//                             name="salaryDeduction"
//                             autoComplete="off"
//                             value={salaryDeduction}
//                             onChange={this.handleInputChange}
//                           >
//                             <option value="">Choose...</option>
//                             <option value="yes">Yes</option>
//                             <option value="no">No</option>
//                           </select>
//                         </div>
//                       </div>
//                     )}

//                     {/* Loan Purpose Dropdown */}
//                     <div className="col-lg-12">
//                       <h6>What is the purpose of the loan?</h6>
//                       <select
//                         className="form-select"
//                         name="loanPurpose"
//                         value={loanPurpose}
//                         onChange={this.handleInputChange}
//                       >
//                         <option value="">Select purpose...</option>
//                         {loanPurposes.map((purpose, index) => (
//                           <option key={index} value={purpose}>
//                             {purpose}
//                           </option>
//                         ))}
//                       </select>
//                     </div>

//                     {/* Loan Purpose Details Textarea */}
//                     <div className="col-lg-12">
//                       <h6>Additional details (optional)</h6>
//                       <textarea
//                         name="loanPurposeDetails"
//                         value={loanPurposeDetails}
//                         onChange={this.handleInputChange}
//                         rows="4"
//                         className="form-control"
//                         placeholder="Provide more information about the loan purpose if necessary."
//                       />
//                     </div>

//                     {/* Loan Term (Range Selector) */}
//                     <div className="col-lg-12">
//                       <h6>How long do you wish to repay the loan? (in months)</h6>
//                       <input
//                         type="range"
//                         name="loanTerm"
//                         min="1"
//                         max={maxLoanTerm}
//                         value={loanTerm}
//                         onChange={this.handleInputChange}
//                         className="form-range"
//                       />
//                       <p>{loanTerm} month(s)</p>
//                     </div>
//                   </div>

//                   {/* Save and Next Buttons */}
//                   <div style={{ width: "100%", display: "flex", justifyContent: "space-between" }}>
//                     <div style={{ width: "100%" }}>
//                       <button
//                         disabled={!isFormValid}
//                         onClick={this.handleSubmit}
//                         type="button"
//                         className="btn btn-success w-90 mt-3"
//                         id="confirm-btn"
//                       >
//                         Save
//                       </button>
//                     </div>
//                     <div style={{ width: "100%", textAlign: "right" }}>
//                       <button
//                         type="button"
//                         className="btn btn-info w-90 mt-3"
//                         id="next-btn"
//                         onClick={() => { this.props.handleOpenUpdateClientDetailsForm() }}
//                       >
//                         Previous
//                       </button>
//                     </div>

//                     <div style={{ width: "100%", textAlign: "right" }}>
//                       <button
//                         type="button"
//                         className="btn btn-danger w-90 mt-3"
//                         id="next-btn"
//                         disabled={!this.state.stateSaved}
//                         onClick={() => { this.props.handleOpenBusinessInformationForm() }}
//                       >
//                         Next
//                       </button>
//                     </div>
//                   </div>

//                   {/* Error Message */}
//                   {this.state.error && <p className="text text-danger">{this.state.error}</p>}

//                   <p className="text text-warning mt-2">
//                     Note that all the information you provide here is kept strictly confidential and is solely meant for verification and loan eligibility determination purposes.
//                   </p>
//                 </div>
//               </div>
//             </div>
//           </div>
//         </div>
//       </>
//     );
//   }
// }



"use client";

import { loanCalculator } from "@/Functions";
import React from "react";
// import loanCalculator from "./loanCalculator"; // Assuming loanCalculator is in the same directory

export default class AddLoanAmountForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loanAmount: '',
      onPayroll: '',
      salaryDeduction: '',
      loanCategory: '',
      loanType: '',
      loanPurpose: '',
      loanPurposeDetails: '',
      loanTerm: 12,  // Default term, can be changed
      interestRate: 11.5,  // Default interest rate
      maxLoanTerm: 12,  // Default max term
      isFormValid: false,
      stateSaved: false,
      monthlyPayment: 0,
      totalProfit: 0,
      error: null,
    };
  }

  handleInputChange = (e) => {
    const { name, value } = e.target;
    this.setState({ [name]: value }, this.checkFormValidity);

    if (name === 'onPayroll') {
      // Update maxLoanTerm based on payroll status
      if (value === 'yes') {
        this.setState({ loanTerm: 12, maxLoanTerm: 60 }); // Max 60 months for salary-based loans
      } else {
        this.setState({ loanTerm: 12, maxLoanTerm: 12 }); // Max 12 months for non-salary loans
      }
    }
  };

  checkFormValidity = () => {
    let { loanAmount, onPayroll, loanCategory, loanType, salaryDeduction, loanPurpose, loanTerm } = this.state;

    let isFormValid = false;

    if (onPayroll === 'yes' && salaryDeduction === 'yes') {
        loanCategory = "salaryLoans";  
        loanType = "salaryBased";  
        isFormValid = true;
    } 
    else if (onPayroll === 'yes' && salaryDeduction === 'no') {
        loanCategory = "assetLoans";  
        loanType = null;
        isFormValid = true;
    }
    else if (onPayroll === 'no') {
        loanCategory = "assetLoans";  
        loanType = null;
        isFormValid = true;
    }

    if (!loanPurpose || !loanAmount || !loanTerm) {
      isFormValid = false;
    }

    this.setState({ isFormValid, loanCategory, loanAmount, loanType }, this.calculateLoanDetails);
  };

  calculateLoanDetails = () => {
    const { loanAmount, loanTerm, interestRate } = this.state;

    // Call loanCalculator and update monthly payment and profit
    const { monthlyPayment, totalProfit } = loanCalculator(loanAmount, interestRate, loanTerm);
    this.setState({ monthlyPayment, totalProfit });
  };

  handleSubmit = async (e) => {
    e.preventDefault();
    delete this.state.isFormValid;
    delete this.state.error;
    delete this.state.onPayroll;
    delete this.state.salaryDeduction;
    this.props.setLoanInformation(this.state);
    this.setState({
      isFormValid: true,
      stateSaved: true,
    });
  };

  render() {
    const { loanAmount, onPayroll, salaryDeduction, loanPurpose, loanPurposeDetails, loanTerm, isFormValid, monthlyPayment, totalProfit, maxLoanTerm } = this.state;
    const loanPurposes = [
      'Business Expansion',
      'Home Renovation',
      'Education',
      'Medical Expenses',
      'Debt Consolidation',
      'Vehicle Purchase',
      'Others'
    ]; // Predefined list of loan purposes

    return (
      <>
        <div className="row">
          <div className="col-lg-12">
            <div className="card">
              <div className="card-header align-items-center d-flex">
                <h4 className="card-title mb-0 flex-grow-1">Loan Application</h4>
              </div>
              <div className="card-body">
                <div className="live-preview">
                  <div className="row gy-4">
                    {/* Loan Amount Input */}
                    <div className="col-lg-12">
                      <h6>How much are you looking to get?</h6>
                      <div className="input-group">
                        <span className="input-group-text">K</span>
                        <input
                          type="number"
                          name="loanAmount"
                          value={loanAmount}
                          autoComplete="off"
                          onChange={this.handleInputChange}
                          className="form-control"
                          aria-label="Loan amount input"
                          aria-describedby="inputGroup-sizing-default"
                        />
                        <span className="input-group-text">.00</span>
                      </div>
                    </div>
                    
                    {/* Payroll Question */}
                    <div className="col-lg-12">
                      <div className="input-group">
                        <label className="form-label mr-2">Are you on payroll (Government or Company)?</label>
                        <select
                          className="form-select"
                          name="onPayroll"
                          autoComplete="off"
                          value={onPayroll}
                          onChange={this.handleInputChange}
                        >
                          <option value="">Choose...</option>
                          <option value="yes">Yes I am</option>
                          <option value="no">No I own a business</option>
                        </select>
                      </div>
                    </div>

                    {/* Salary Deduction Question (Visible only if onPayroll is 'yes') */}
                    {onPayroll === 'yes' && (
                      <div className="col-lg-12">
                        <div className="input-group">
                          <label className="form-label mr-2">Do you want this loan's monthly payment to be deducted from your salary?</label>
                          <select
                            className="form-select"
                            name="salaryDeduction"
                            autoComplete="off"
                            value={salaryDeduction}
                            onChange={this.handleInputChange}
                          >
                            <option value="">Choose...</option>
                            <option value="yes">Yes</option>
                            <option value="no">No</option>
                          </select>
                        </div>
                      </div>
                    )}

                    {/* Loan Purpose Dropdown */}
                    <div className="col-lg-12">
                      <h6>What is the purpose of the loan?</h6>
                      <select
                        className="form-select"
                        name="loanPurpose"
                        value={loanPurpose}
                        onChange={this.handleInputChange}
                      >
                        <option value="">Select purpose...</option>
                        {loanPurposes.map((purpose, index) => (
                          <option key={index} value={purpose}>
                            {purpose}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* Loan Purpose Details Textarea */}
                    <div className="col-lg-12">
                      <h6>Additional details (optional)</h6>
                      <textarea
                        name="loanPurposeDetails"
                        value={loanPurposeDetails}
                        onChange={this.handleInputChange}
                        rows="4"
                        className="form-control"
                        placeholder="Provide more information about the loan purpose if necessary."
                      />
                    </div>

                    {/* Loan Term (Range Selector) */}
                    <div className="col-lg-12">
                      <h6>How long do you wish to repay the loan? (in months)</h6>
                      <input
                        type="range"
                        name="loanTerm"
                        min="1"
                        max={maxLoanTerm}
                        value={loanTerm}
                        onChange={this.handleInputChange}
                        className="form-range"
                      />
                      <p>{loanTerm} month(s)</p>
                    </div>

                    {/* Display Calculated Results */}
                    {isFormValid && (
                      <>
                        <div className="col-lg-12">
                          <p>Monthly Payment: K {monthlyPayment.toFixed(2)}</p>
                        </div>
                        <div className="col-lg-12">
                          <p>Total Profit for the Company: K {totalProfit.toFixed(2)}</p>
                        </div>
                      </>
                    )}
                  </div>

                  {/* Save and Next Buttons */}
                  <div style={{ width: "100%", display: "flex", justifyContent: "space-between" }}>
                    <div style={{ width: "100%" }}>
                      <button
                        disabled={!isFormValid}
                        onClick={this.handleSubmit}
                        type="button"
                        className="btn btn-success w-90 mt-3"
                        id="confirm-btn"
                      >
                        Save
                      </button>
                    </div>
                    <div style={{ width: "100%", textAlign: "right" }}>
                      <button
                        type="button"
                        className="btn btn-info w-90 mt-3"
                        id="next-btn"
                        onClick={() => { this.props.handleOpenUpdateClientDetailsForm() }}
                      >
                        Previous
                      </button>
                    </div>

                    <div style={{ width: "100%", textAlign: "right" }}>
                      <button
                        type="button"
                        className="btn btn-danger w-90 mt-3"
                        id="next-btn"
                        onClick={() => { this.props.handleOpenNextLoanCategory() }}
                      >
                        Next
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  }
}
